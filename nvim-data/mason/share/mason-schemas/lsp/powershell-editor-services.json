{"title":"PowerShell","properties":{"powershell.sideBar.CommandExplorerExcludeFilter":{"markdownDescription":"Specifies an array of modules to exclude from Command Explorer listing.","type":"array","default":[],"items":{"type":"string"}},"powershell.scriptAnalysis.enable":{"markdownDescription":"Enables real-time script analysis using [PSScriptAnalyzer](https:\/\/github.com\/PowerShell\/PSScriptAnalyzer) that populates the [Problems view](command:workbench.panel.markers.view.focus).","default":true,"type":"boolean"},"powershell.powerShellAdditionalExePaths":{"additionalProperties":{"type":"string"},"markdownDescription":"Specifies a list of Item \/ Value pairs where the **Item** is a user-chosen name and the **Value** is an absolute path to a PowerShell executable. The name appears in the [Session Menu Command](command:PowerShell.ShowSessionMenu) and is used to reference this executable in the `#powershell.powerShellDefaultVersion#` setting.","default":{},"type":"object"},"powershell.scriptAnalysis.settingsPath":{"markdownDescription":"Specifies the path to a [PSScriptAnalyzer](https:\/\/github.com\/PowerShell\/PSScriptAnalyzer) settings file. **This setting may not work as expected currently!**","default":"PSScriptAnalyzerSettings.psd1","type":"string"},"powershell.powerShellDefaultVersion":{"markdownDescription":"Specifies the default PowerShell version started by the extension. The name must match what is displayed in the [Session Menu command](command:PowerShell.ShowSessionMenu), for example, `Windows PowerShell (x86)`. You can specify additional PowerShell executables with the `#powershell.powerShellAdditionalExePaths#` setting.","default":"","type":"string"},"powershell.codeFolding.enable":{"markdownDescription":"Enables syntax based code folding. When disabled, the default indentation based code folding is used.","default":true,"type":"boolean"},"powershell.powerShellExePath":{"scope":"machine","default":"","type":"string","markdownDescription":"**Deprecated:** Specifies the path to the PowerShell executable.","markdownDeprecationMessage":"**Deprecated:** Please use the `#powershell.powerShellAdditionalExePaths#` setting instead."},"powershell.codeFolding.showLastLine":{"markdownDescription":"Shows the last line of a folded section similar to the default VS Code folding style. When disabled, the entire folded region is hidden.","default":true,"type":"boolean"},"powershell.trace.server":{"markdownDescription":"Traces the communication between VS Code and the PowerShell Editor Services language server. **This setting is only meant for extension developers!**","type":"string","default":"off","enum":["off","messages","verbose"]},"powershell.codeFormatting.autoCorrectAliases":{"markdownDescription":"Replaces aliases with their aliased name.","default":false,"type":"boolean"},"powershell.integratedConsole.focusConsoleOnExecute":{"markdownDescription":"Switches focus to the console when a script selection is run or a script file is debugged.","default":true,"type":"boolean"},"powershell.promptToUpdatePowerShell":{"markdownDescription":"Specifies whether you may be prompted to update your version of PowerShell.","default":true,"type":"boolean"},"powershell.integratedConsole.useLegacyReadLine":{"markdownDescription":"This will disable the use of PSReadLine in the PowerShell Extension Terminal and use a legacy implementation. **This setting is not recommended and likely to be deprecated!**","default":false,"type":"boolean"},"powershell.promptToUpdatePackageManagement":{"markdownDeprecationMessage":"**Deprecated:** This prompt has been removed as it's no longer strictly necessary to upgrade the `PackageManagement` module.","markdownDescription":"**Deprecated:** Specifies whether you should be prompted to update your version of `PackageManagement` if it's under 1.4.6.","default":false,"type":"boolean"},"powershell.integratedConsole.forceClearScrollbackBuffer":{"markdownDescription":"Use the VS Code API to clear the terminal since that's the only reliable way to clear the scrollback buffer. Turn this on if you're used to `Clear-Host` clearing scroll history. **This setting is not recommended and likely to be deprecated!**","default":false,"type":"boolean"},"powershell.buttons.showPanelMovementButtons":{"markdownDescription":"Show buttons in the editor's title bar for moving the terminals pane (with the PowerShell Extension Terminal) around.","default":false,"type":"boolean"},"powershell.suppressAdditionalExeNotFoundWarning":{"markdownDescription":"Suppresses the warning message when any of `#powershell.powerShellAdditionalExePaths#` is not found.","default":false,"type":"boolean"},"powershell.buttons.showRunButtons":{"markdownDescription":"Show the `Run` and `Run Selection` buttons in the editor's title bar.","default":true,"type":"boolean"},"powershell.startAsLoginShell.osx":{"markdownDescription":"Starts the PowerShell extension's underlying PowerShell process as a login shell, if applicable.","default":true,"type":"boolean"},"powershell.pester.debugOutputVerbosity":{"markdownDescription":"Defines the verbosity of output to be used when debugging a test or a block. For Pester 5 and newer the default value `Diagnostic` will print additional information about discovery, skipped and filtered tests, mocking and more.","type":"string","default":"Diagnostic","enum":["None","Minimal","Normal","Detailed","Diagnostic"]},"powershell.startAsLoginShell.linux":{"markdownDescription":"Starts the PowerShell extension's underlying PowerShell process as a login shell, if applicable.","default":false,"type":"boolean"},"powershell.startAutomatically":{"markdownDescription":"Starts the PowerShell extension automatically when a PowerShell file is opened. If `false`, to start the extension use the [Restart Session command](command:PowerShell.RestartSession). **IntelliSense, code navigation, the Extension Terminal, code formatting, and other features are not enabled until the extension starts.**","default":true,"type":"boolean"},"powershell.integratedConsole.showOnStartup":{"markdownDescription":"Shows the Extension Terminal when the PowerShell extension is initialized. When disabled, the pane is not opened on startup, but the Extension Terminal is still created in order to power the extension's features.","default":true,"type":"boolean"},"powershell.codeFormatting.openBraceOnSameLine":{"markdownDescription":"Places open brace on the same line as its associated statement.","default":true,"type":"boolean"},"powershell.integratedConsole.startInBackground":{"markdownDescription":"Starts the Extension Terminal in the background. **If this is enabled, to access the terminal you must run the [Show Extension Terminal command](command:PowerShell.ShowSessionConsole), and once shown it cannot be put back into the background.** This option completely hides the Extension Terminal from the terminals view. You are probably looking for the `#powershell.integratedConsole.showOnStartup#` option instead.","default":false,"type":"boolean"},"powershell.codeFormatting.newLineAfterOpenBrace":{"markdownDescription":"Adds a newline (line break) after an open brace.","default":true,"type":"boolean"},"powershell.enableProfileLoading":{"markdownDescription":"Specifies whether the extension loads [PowerShell profiles](https:\/\/learn.microsoft.com\/en-us\/powershell\/module\/microsoft.powershell.core\/about\/about_profiles). Note that the extension's \"Current Host\" profile is `Microsoft.VSCode_profile.ps1`, which will be loaded instead of the default \"Current Host\" profile of `Microsoft.PowerShell_profile.ps1`. Use the \"All Hosts\" profile `profile.ps1` for common configuration.","default":true,"type":"boolean"},"powershell.codeFormatting.newLineAfterCloseBrace":{"markdownDescription":"Adds a newline (line break) after a closing brace.","default":true,"type":"boolean"},"powershell.enableReferencesCodeLens":{"markdownDescription":"Specifies if Code Lenses are displayed above function definitions, used to show the number of times the function is referenced in the workspace and navigate to those references. Large workspaces may want to disable this setting if performance is compromised. See also `#powershell.analyzeOpenDocumentsOnly#`.","default":true,"type":"boolean"},"powershell.codeFormatting.pipelineIndentationStyle":{"markdownEnumDescriptions":["Indent once after the first pipeline and keep this indentation.","Indent more after the first pipeline and keep this indentation.","Do not increase indentation.","Do not change any existing pipeline indentation (disables feature)."],"type":"string","default":"NoIndentation","markdownDescription":"Whether to increase indentation after a pipeline for multi-line statements. See [PSScriptAnalyzer](https:\/\/github.com\/PowerShell\/PSScriptAnalyzer\/blob\/a94d9f5666bba9f569cdf9c1bc99556934f2b8f4\/docs\/Rules\/UseConsistentIndentation.md#pipelineindentation-string-default-value-is-increaseindentationforfirstpipeline) for examples. It is suggested to use `IncreaseIndentationForFirstPipeline` instead of the default `NoIndentation`. **This default may change in the future,** please see the [Request For Comment](https:\/\/github.com\/PowerShell\/vscode-powershell\/issues\/4296).","enum":["IncreaseIndentationForFirstPipeline","IncreaseIndentationAfterEveryPipeline","NoIndentation","None"]},"powershell.integratedConsole.startLocation":{"markdownEnumDescriptions":["Creates the Extension Terminal in Editor area","Creates the Extension Terminal in Panel area"],"type":"string","default":"Panel","markdownDescription":"Sets the startup location for Extension Terminal.","enum":["Editor","Panel"]},"powershell.integratedConsole.suppressStartupBanner":{"markdownDescription":"Do not show the startup banner in the PowerShell Extension Terminal.","default":false,"type":"boolean"},"powershell.debugging.createTemporaryIntegratedConsole":{"markdownDescription":"Creates a temporary PowerShell Extension Terminal for each debugging session. This is useful for debugging PowerShell classes and binary modules.","default":false,"type":"boolean"},"powershell.developer.editorServicesWaitForDebugger":{"markdownDescription":"Launches the LSP server with the `\/waitForDebugger` flag to force it to wait for a .NET debugger to attach before proceeding, and emit its PID until then. **This setting is only meant for extension developers and requires the extension to be run in development mode!**","default":false,"type":"boolean"},"powershell.developer.editorServicesLogLevel":{"markdownEnumDescriptions":["Enables all logging possible, please use this setting when submitting logs for bug reports!","Enables more logging than normal.","The default logging level.","Only log warnings and errors.","Only log errors.","Disable all logging possible. No log files will be written!"],"type":"string","default":"Normal","markdownDescription":"Sets the log verbosity for both the extension and its LSP server, PowerShell Editor Services. **Please set to `Diagnostic` when recording logs for a bug report!**","enum":["Diagnostic","Verbose","Normal","Warning","Error","None"]},"powershell.developer.setExecutionPolicy":{"markdownDescription":"On Windows we launch the PowerShell executable with `-ExecutionPolicy Bypass` so that the LSP server (PowerShell Editor Services module) will launch without issue. Some anti-virus programs disallow this command-line argument and this flag can be used to remove it. **Using this setting may require trusting the script manually in order for it to launch!**","default":true,"type":"boolean"},"powershell.developer.bundledModulesPath":{"markdownDescription":"Specifies an alternative path to the folder containing modules that are bundled with the PowerShell extension, that is: PowerShell Editor Services, PSScriptAnalyzer and PSReadLine. **This setting is only meant for extension developers and requires the extension to be run in development mode!**","default":"..\/..\/PowerShellEditorServices\/module","type":"string"},"powershell.developer.featureFlags":{"markdownDescription":"An array of strings that enable experimental features in the PowerShell extension. **No flags are currently available!**","type":"array","default":[],"items":{"type":"string"}},"powershell.codeFormatting.whitespaceBeforeOpenBrace":{"markdownDescription":"Adds a space between a keyword and its associated script-block expression.","default":true,"type":"boolean"},"powershell.developer.waitForSessionFileTimeoutSeconds":{"markdownDescription":"Specifies how many seconds the extension will wait for the LSP server, PowerShell Editor Services, to connect. The default is four minutes; try increasing this value if your computer is particularly slow (often caused by overactive anti-malware programs).","default":240,"type":"number"},"powershell.codeFormatting.whitespaceBeforeOpenParen":{"markdownDescription":"Adds a space between a keyword (`if`, `elseif`, `while`, `switch`, etc.) and its associated conditional expression.","default":true,"type":"boolean"},"powershell.pester.useLegacyCodeLens":{"markdownDescription":"Use a CodeLens that is compatible with Pester 4. Disabling this will show `Run Tests` on all `It`, `Describe` and `Context` blocks, and will correctly work only with Pester 5 and newer.","default":true,"type":"boolean"},"powershell.codeFormatting.whitespaceAroundOperator":{"markdownDescription":"Adds spaces before and after an operator (`=`, `+`, `-`, etc.).","default":true,"type":"boolean"},"powershell.pester.codeLens":{"markdownDescription":"This setting controls the appearance of the `Run Tests` and `Debug Tests` CodeLenses that appears above Pester tests.","default":true,"type":"boolean"},"powershell.codeFormatting.whitespaceAfterSeparator":{"markdownDescription":"Adds a space after a separator (`,` and `;`).","default":true,"type":"boolean"},"powershell.pester.outputVerbosity":{"markdownDescription":"Defines the verbosity of output to be used. For Pester 5 and newer the default value `FromPreference` will use the `Output` settings from the `$PesterPreference` defined in the caller's context, and will default to `Normal` if there is none. For Pester 4 the `FromPreference` and `Normal` options map to `All`, and `Minimal` option maps to `Fails`.","enum":["FromPreference","None","Minimal","Normal","Detailed","Diagnostic"],"default":"FromPreference","type":"string"},"powershell.codeFormatting.whitespaceInsideBrace":{"markdownDescription":"Adds a space after an opening brace (`{`) and before a closing brace (`}`).","default":true,"type":"boolean"},"powershell.analyzeOpenDocumentsOnly":{"markdownDescription":"Specifies to search for references only within open documents instead of all workspace files. An alternative to `#powershell.enableReferencesCodeLens#` that allows large workspaces to support some references without the performance impact.","default":false,"type":"boolean"},"powershell.codeFormatting.whitespaceBetweenParameters":{"markdownDescription":"Removes redundant whitespace between parameters.","default":false,"type":"boolean"},"powershell.bugReporting.project":{"markdownDeprecationMessage":"**Deprecated:** This setting was never meant to be changed!","markdownDescription":"**Deprecated:** Specifies the URL of the GitHub project in which to generate bug reports.","default":"https:\/\/github.com\/PowerShell\/vscode-powershell","type":"string"},"powershell.codeFormatting.whitespaceAroundPipe":{"markdownDeprecationMessage":"**Deprecated:** Please use the `#powershell.codeFormatting.addWhitespaceAroundPipe#` setting instead. If you've used this setting before, we have moved it for you automatically.","markdownDescription":"**Deprecated:** Please use the `#powershell.codeFormatting.addWhitespaceAroundPipe#` setting instead. If you've used this setting before, we have moved it for you automatically.","default":true,"type":"boolean"},"powershell.codeFormatting.useCorrectCasing":{"markdownDescription":"Use correct casing for cmdlets.","default":false,"type":"boolean"},"powershell.codeFormatting.addWhitespaceAroundPipe":{"markdownDescription":"Adds a space before and after the pipeline operator (`|`) if it is missing.","default":true,"type":"boolean"},"powershell.helpCompletion":{"markdownEnumDescriptions":["Disables the feature.","Inserts a block style help comment, for example:\n\n`<#`\n\n`.<help keyword>`\n\n`<help content>`\n\n`#>`","Inserts a line style help comment, for example:\n\n`# .<help keyword>`\n\n`# <help content>`"],"type":"string","default":"BlockComment","markdownDescription":"Specifies the [comment based help](https:\/\/learn.microsoft.com\/en-us\/powershell\/module\/microsoft.powershell.core\/about\/about_comment_based_help) completion style triggered by typing ` ##`.","enum":["Disabled","BlockComment","LineComment"]},"powershell.codeFormatting.trimWhitespaceAroundPipe":{"markdownDescription":"Trims extraneous whitespace (more than one character) before and after the pipeline operator (`|`).","default":false,"type":"boolean"},"powershell.codeFormatting.useConstantStrings":{"markdownDescription":"Use single quotes if a string is not interpolated and its value does not contain a single quote.","default":false,"type":"boolean"},"powershell.codeFormatting.ignoreOneLineBlock":{"markdownDescription":"Does not reformat one-line code blocks, such as: `if (...) {...} else {...}`.","default":true,"type":"boolean"},"powershell.codeFormatting.avoidSemicolonsAsLineTerminators":{"markdownDescription":"Removes redundant semicolon(s) at the end of a line where a line terminator is sufficient.","default":false,"type":"boolean"},"powershell.codeFormatting.alignPropertyValuePairs":{"markdownDescription":"Align assignment statements in a hashtable or a DSC Configuration.","default":true,"type":"boolean"},"powershell.codeFormatting.preset":{"markdownEnumDescriptions":["The three brace settings are respected as-is.","Sets `#powershell.codeFormatting.openBraceOnSameLine#` to `false`, `#powershell.codeFormatting.newLineAfterOpenBrace#` to `true`, and `#powershell.codeFormatting.newLineAfterCloseBrace#` to `true`.","Sets `#powershell.codeFormatting.openBraceOnSameLine#` to `true`, `#powershell.codeFormatting.newLineAfterOpenBrace#` to `true`, and `#powershell.codeFormatting.newLineAfterCloseBrace#` to `false`.","Sets `#powershell.codeFormatting.openBraceOnSameLine#` to `true`, `#powershell.codeFormatting.newLineAfterOpenBrace#` to `true`, and `#powershell.codeFormatting.newLineAfterCloseBrace#` to `true`."],"type":"string","default":"Custom","markdownDescription":"Sets the code formatting options to follow the given indent style in a way that is compatible with PowerShell syntax. Any setting other than `Custom` will configure (and override) the settings:\n\n* `#powershell.codeFormatting.openBraceOnSameLine#`\n\n* `#powershell.codeFormatting.newLineAfterOpenBrace#`\n\n* `#powershell.codeFormatting.newLineAfterCloseBrace#`\n\nFor more information about the brace styles, please see [PoshCode's discussion](https:\/\/github.com\/PoshCode\/PowerShellPracticeAndStyle\/issues\/81).","enum":["Custom","Allman","OTBS","Stroustrup"]},"powershell.sideBar.CommandExplorerVisibility":{"markdownDescription":"Specifies the visibility of the Command Explorer in the side bar.","default":false,"type":"boolean"},"powershell.useX86Host":{"markdownDeprecationMessage":"**Deprecated:** This setting was removed when the PowerShell installation searcher was added. Please use the `#powershell.powerShellAdditionalExePaths#` setting instead.","markdownDescription":"**Deprecated:** Uses the 32-bit language service on 64-bit Windows. This setting has no effect on 32-bit Windows or on the PowerShell extension debugger, which has its own architecture configuration.","default":false,"type":"boolean"},"powershell.cwd":{"markdownDescription":"A path where the Extension Terminal will be launched. Both the PowerShell process's and the shell's location will be set to this directory. Does not support variables, but does support the use of '~' and paths relative to a single workspace. **For multi-root workspaces, use the name of the folder you wish to have as the cwd.**","default":"","type":"string"}}}